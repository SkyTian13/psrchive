//-*-C++-*-
/***************************************************************************
 *
 *   Copyright (C) 2007 by Willem van Straten
 *   Licensed under the Academic Free License version 2.1
 *
 ***************************************************************************/


/* <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*>


  IMPORTANT NOTICE:

  @configure_input@

  Do not edit ThreadContext.h directly, or your modifications may be lost.

  Please edit ThreadContext.h.in


<*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> */


/* $Source: /cvsroot/psrchive/psrchive/Util/genutil/Attic/ThreadContext.h.in,v $
   $Revision: 1.5 $
   $Date: 2007/06/04 19:41:00 $
   $Author: straten $ */

#ifndef __ThreadContext_h
#define __ThreadContext_h

#ifdef HAVE_PTHREAD
#undef HAVE_PTHREAD
#endif

// the configure script sets this variable
#define HAVE_PTHREAD @EXPORT_HAVE_PTHREAD@

#if HAVE_PTHREAD
#include <pthread.h>
#endif

class ThreadContext {

public:

  //! Default constructor
  ThreadContext ();

  //! Destructor
  ~ThreadContext ();

  //! Obtain the mutual exclusion lock
  void lock ();

  //! Release the mutual exclusion lock
  void unlock ();

  //! Wait for a condition
  void wait ();

  //! Signal a condition to a single waiting thread
  void signal ();

  //! Signal a condition to all waiting threads
  void broadcast ();

  //! A simple mechanism for locking and automatically unlocking
  class Lock;

protected:

#if HAVE_PTHREAD

  //! condition signaling
  pthread_cond_t cond;

  //! mutual exclusion locking
  pthread_mutex_t mutex;

#endif


};

class ThreadContext::Lock {
public:
  //! The constructor obtains the mutual exclusion lock ...
  Lock (ThreadContext* t) { if (t) t->lock(); context = t; }
  //! And the destructor releases it
  ~Lock () { if (context) context->unlock(); }
protected:
  //! The context in which the lock is held
  ThreadContext* context;
};

#endif // !defined(__ThreadContext_h)
