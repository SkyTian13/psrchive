#                                               -*- Autoconf -*-
# Process this file with autoconf to produce a configure script.

AC_PREREQ(2.57)
AC_INIT([PSRCHIVE],[7.4+],[psrchive-developers@lists.sourceforge.net])

AC_CONFIG_AUX_DIR([config])
AC_CONFIG_SRCDIR([Util/Makefile.am])

#
# Set the default installation directory
#

if test -d /sw; then
  DEFAULT_INSTALL=/sw
elif test -d /usr/local; then
  DEFAULT_INSTALL=/usr/local
else
  DEFAULT_INSTALL=/
fi

AC_ARG_VAR([PSRHOME],[Standard pulsar home directory])
AC_ARG_VAR([LOGIN_ARCH],[Architecture-dependent sub-directory of PSRHOME])
AC_ARG_VAR([PACKAGES],[Root directory of third-party packages])

AC_PREFIX_DEFAULT([${PSRHOME:-`sh -c "ls -1df /sw /usr/local / | head -1"`}${PSRHOME:+"/$LOGIN_ARCH"}])

if test -z "$PSRHOME"; then
  AC_MSG_WARN([The PSRHOME environment variable is not set])
else
  if test -z "$LOGIN_ARCH"; then
    AC_MSG_WARN([The LOGIN_ARCH environment variable is not set])
  fi
fi

#
# By default, runtime files will be found in the installation directory
#
if test "x$prefix" != xNONE; then
  PSRCHIVE_INSTALL=$prefix
else
  PSRCHIVE_INSTALL=$ac_default_prefix
fi

PSRCHIVE_HTTP="http://psrchive.sourceforge.net"

AC_SUBST(PSRCHIVE_INSTALL)
AC_SUBST(PSRCHIVE_HTTP)

# Check if the user has set compiler options
SWIN_OPTIONS_SET

# Enable convenience compiler selection
SWIN_COMPILER

# Initialize automake to place object files in sub-directories
AM_INIT_AUTOMAKE([foreign subdir-objects])

# Create static libraries by default
AC_DISABLE_SHARED

# Ensure that SIGPROC find does not over-ride the standard
SWIN_PROG_FIND

# Checks for programs.

AC_PROG_CXX
AC_PROG_FC
SWIN_TEST_CXXF77

AC_PROG_CC
AC_PROG_CPP
AC_PROG_CXXCPP
AM_PROG_CC_C_O

AC_PROG_INSTALL
AC_PROG_LIBTOOL

AC_F77_WRAPPERS
_STAR_RESTFP_FIX

# Determine the machine endian
AC_C_BIGENDIAN

# Enable large-file support
AC_SYS_LARGEFILE

# Check which version of the pulsar catalog is installed
SWIN_PSRCAT

#
# Disable the debugging information option, -g
#
SWIN_DEBUG

ATNF_DISABLE_OPTIMIZE

#
# Check C++ template compilation
#
SWIN_BEST_PARTIAL_SPECIALIZATION
SWIN_DEFAULT_PARTIAL_SPECIALIZATION
SWIN_COMPLEX_TEMPLATE
SWIN_TEST_LIMITS

#
# Set up to use the standard package installation directory
#
AC_ARG_ENABLE([local],
              AC_HELP_STRING([--disable-local],
	                     [Don't look for dependencies in /usr/local]))

if test x"$enable_local" != x"no"; then
  CPPFLAGS="-I$DEFAULT_INSTALL/include $CPPFLAGS"
  LDFLAGS="-L$DEFAULT_INSTALL/lib $LDFLAGS"
fi

#
# Set up to use the pulsar group package installation directory
#
if test -d $PSRHOME/packages/$LOGIN_ARCH; then
  CPPFLAGS="-I$PSRHOME/packages/$LOGIN_ARCH/include $CPPFLAGS"
  LDFLAGS="-L$PSRHOME/packages/$LOGIN_ARCH/lib $LDFLAGS"
fi

#
# Checks for header files.
#
AC_HEADER_SYS_WAIT
AC_CHECK_HEADERS([sys/statvfs.h sys/vfs.h sys/mount.h])

#
# Checks for essential libraries
#
AC_CHECK_LIB([m], [sin])
SWIN_LIB_FFTW
SWIN_LIB_MKL
SWIN_LIB_IPP

#
# Check that at least one FFT library is available
#
if test x"$have_fftw" = xno -a x"$have_fftw3" = xno -a x"$have_mkl" = xno; then
  AC_MSG_ERROR([No suitable FFT library was found.

  Please see http://psrchive.sourceforge.net/third/fftw

])
fi

AC_SUBST(FFT_LIBS)
FFT_LIBS="$MKL_LIBS $FFTW_LIBS $FFTW3_LIBS $IPP_LIBS"
AC_SUBST(FFT_CFLAGS)
FFT_CFLAGS="$MKL_CFLAGS $FFTW_CFLAGS $FFTW3_CFLAGS $IPP_CFLAGS"

#
# Checks for optional libraries
#
SWIN_LIB_CFITSIO
SWIN_LIB_TEMPO2
SWIN_LIB_MPI
SWIN_LIB_READLINE

ACX_PTHREAD
LIBS="$PTHREAD_LIBS $LIBS"
CFLAGS="$CFLAGS $PTHREAD_CFLAGS"
CXXFLAGS="$CXXFLAGS $PTHREAD_CFLAGS"

if test x"$enable_lean" == xyes; then

AM_CONDITIONAL(HAVE_PGPLOT, [test 1 = 0])
AM_CONDITIONAL(HAVE_QT, [test 1 = 0])
AM_CONDITIONAL(HAVE_QTDRIV, [test 1 = 0])

else

#
# Checks for graphics libraries
#
SWIN_LIB_PGPLOT
BNV_HAVE_QT
SWIN_LIB_QTDRIV

fi

#
# For developers: preserve file modification times
#
INSTALL_DATA="${INSTALL} -m 644 -p"
install_sh="CPPROG='cp -p' ${install_sh}"

#
# For developers: provide the ability to compile a lean version of the code
#
AC_ARG_WITH([lean], AC_HELP_STRING([--enable-lean],
				   [compile a lean version of the library]))

AM_CONDITIONAL(MAKE_LEAN, [test x"$enable_lean" == xyes])

#
# Checks for library functions.
#
SWIN_FUNC_GETOPT_LONG

AM_CONFIG_HEADER([config.h])
AC_CONFIG_FILES([
		config/Makefile
		Util/Makefile
		Util/third/Makefile
		Util/third/parsifal/Makefile
		Util/third/star/Makefile
		Util/third/gnu/Makefile
		Util/units/Makefile
		Util/fft/Makefile
		Util/genutil/Makefile
		Util/pgutil/Makefile
		Util/qtutil/Makefile
		Util/fitsutil/Makefile
		Util/tempo/Makefile
		Util/tempo2/Makefile
		Base/Makefile
		Base/Classes/Makefile
		Base/Extensions/Makefile
		Base/Checks/Makefile
		Base/Formats/Makefile
		Base/Formats/EPN/Makefile
		Base/Formats/Timer/Makefile
		Base/Formats/PSRFITS/Makefile
                Base/Formats/ASCII/Makefile
		Base/Applications/Makefile
		More/Makefile
		More/General/Makefile
		More/Plotting/Makefile
		More/MEAL/Makefile
		More/Timing/Makefile
		More/Polarimetry/Makefile
		More/Polarimetry/iri2001/Makefile
		More/Applications/Makefile
		More/rhythm/Makefile
		More/psrgui/Makefile
		Management/Makefile
		Management/psrchive_ldflags
		Management/psrchive_cflags
		Management/psrchive_install.h
		Makefile])

AC_OUTPUT

if test x"$enable_lean" == xyes; then

   echo
   echo "********************************************"
   echo "A lean version of PSRCHIVE will be compiled."
   echo "This means that the polarimetric calibration"
   echo "software, related error analysis routines,"
   echo "and graphical interfaces will be unavailable."
   echo "********************************************"

else

if test x"$have_tempo2" != xyes; then
   echo
   echo "The TEMPO2 Predictor library was not found:"
   echo "  PSRCHIVE applications will not be able to use TEMPO2 predictors."
fi

if test x"$have_cfitsio" != xyes; then
   echo
   echo "The CFITSIO library was not found:"
   echo "  PSRCHIVE applications will not be able to load PSRFITS files."
fi

if test x"$have_pgplot" != xyes; then
   echo
   echo "The PGPLOT library was not found:"
   echo "  PSRCHIVE applications will not be able to plot."
   echo "  Please see http://psrchive.sourceforge.net/third/pgplot"
fi

if test x"$have_qt" != xyes; then
   echo
   echo "The Qt library was not found:"
   echo "  PSRCHIVE graphical user interfaces will not be compiled."
fi

if test x"$have_qtdriv" != xyes; then
   echo
   echo "The qtdriv device handler is not installed:"
   echo "  rhythm will not be compiled."
fi

fi

echo
echo "PSRCHIVE is now ready to be compiled.  Please run 'make'"
echo

